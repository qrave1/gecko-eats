package telegram

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"strings"
	"time"

	"github.com/qrave1/gecko-eats/internal/infrastructure/sql"
	tele "gopkg.in/telebot.v4"
)

var (
	menu        = &tele.ReplyMarkup{ResizeKeyboard: true}
	petSelector = &tele.ReplyMarkup{}
	addPetMenu  = &tele.ReplyMarkup{}

	btnViewPets   = menu.Data("üìã –ü–∏—Ç–æ–º—Ü—ã", "viewPets")
	btnAddPet     = menu.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞", "addPet")
	btnAddFeeding = menu.Data("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "addFeeding")
)

func (b *BotServer) registerHandlers() {
	menu.Inline(
		menu.Row(btnViewPets, btnAddPet, btnAddFeeding),
	)

	b.bot.Handle("/start", func(c tele.Context) error {
		return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", menu)
	})

	// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
	b.bot.Handle(&btnViewPets, func(c tele.Context) error {
		pets, err := b.repo.Pets()

		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤", "error", err)

			return c.Edit("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤")
		}

		if len(pets) == 0 {
			return c.Edit("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
		}

		petSelector = &tele.ReplyMarkup{}

		var rows []tele.Row

		for _, p := range pets {
			btn := petSelector.Data(p.Name, p.ID)

			rows = append(rows, petSelector.Row(btn))
		}

		petSelector.Inline(rows...)

		return c.Edit("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:", petSelector)
	})

	b.bot.Handle(&btnAddPet, func(c tele.Context) error {
		return c.Edit("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", addPetMenu)
	})

	b.bot.Handle(&btnAddFeeding, func(c tele.Context) error {
		return c.Edit("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>", addPetMenu)
	})

	b.bot.Handle(tele.OnText, func(c tele.Context) error {
		if c.Message().IsReply() {
			originalMsg := c.Message().ReplyTo.Text

			if strings.Contains(originalMsg, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞") {
				return b.newPet(c)
			} else if strings.Contains(originalMsg, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>") {
				return b.newFeeding(c)
			}
		}

		return nil
	})

	// –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏—Ç–æ–º—Ü–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	b.bot.Handle(tele.OnCallback, func(c tele.Context) error {
		petID := c.Callback().Data

		petID = strings.TrimPrefix(petID, "\f")

		pet, err := b.repo.PetByID(petID)

		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", "error", err, "petID", petID)

			return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"})
		}

		feedings, err := b.repo.Feedings(pet.ID, 10)

		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error", err, "petID", petID)

			return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
		}

		var answerBuilder strings.Builder

		answerBuilder.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è %s:\n", pet.Name))

		for _, f := range feedings {
			answerBuilder.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %s\n", f.Date, f.FoodType))
		}

		return c.Edit(answerBuilder.String())
	})
}

func (b *BotServer) newPet(c tele.Context) error {
	pet := sql.NewPet(strings.Split(c.Message().Text, " ")[0])

	err := b.repo.AddPet(pet)

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", "error", err)

		return c.Send("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", &tele.SendOptions{ReplyTo: c.Message()})
	}

	err = c.Send("–ü–∏—Ç–æ–º–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω!", &tele.SendOptions{ReplyTo: c.Message()})

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", "error", err)

		return err
	}

	return nil
}

func (b *BotServer) newFeeding(c tele.Context) error {
	parts := strings.Split(c.Text(), " ")

	if len(parts) != 2 {
		return c.Send(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	pet, err := b.repo.PetByName(parts[0])

	if err != nil {
		slog.Error(
			"create feeding schedule: get pet by name",
			"error", err,
			"petName", parts[0],
			"parts", parts,
		)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞", &tele.SendOptions{ReplyTo: c.Message()})
	}

	var foodCycleJSON []string

	err = json.Unmarshal([]byte(pet.FoodCycle), &foodCycleJSON)

	if err != nil {
		slog.Error(
			"create feeding schedule: unmarshal food cycle",
			"error", err,
			"food_cycle", pet.FoodCycle,
		)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è: "+err.Error(), &tele.SendOptions{ReplyTo: c.Message()})
	}

	schedule := b.generateFeedingSchedule(time.Now(), pet.ID, foodCycleJSON)

	return c.Send(
		fmt.Sprintf("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ: %d –∫–æ—Ä–º–ª–µ–Ω–∏–π", len(schedule)),
		&tele.SendOptions{ReplyTo: c.Message()},
	)
}

func (b *BotServer) generateFeedingSchedule(
	startDate time.Time,
	petID string,
	petCycle []string,
) []sql.Feeding {
	var schedule []sql.Feeding

	endDate := startDate.AddDate(0, 1, 0) // +1 –º–µ—Å—è—Ü

	lastIx := 0

	for d := startDate; d.Before(endDate); d = d.AddDate(0, 0, 1) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–µ 31 —Ñ–µ–≤—Ä–∞–ª—è –∏ —Ç.–ø.)
		if d.Day() != startDate.Day() && d.Day() < startDate.Day() {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã
		}

		for i, foodType := range petCycle {
			parsedFoodType, err := time.Parse("2006-01-02", foodType)

			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è", "error", err, "foodType", foodType)

				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
			}

			if parsedFoodType.Year() == d.Year() &&
				parsedFoodType.Month() == d.Month() &&
				parsedFoodType.Day() == d.Day() {

				lastIx = i
				break
			}
		}

		// –í–µ—á–µ—Ä–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ (18:00)
		evening := time.Date(d.Year(), d.Month(), d.Day(), 18, 0, 0, 0, d.Location())

		err := b.repo.AddFeeding(petID, evening.Format("2006-01-02"), petCycle[lastIx])

		if err != nil {
			slog.Error(
				"add feeding",
				slog.Any("error", err),
				slog.String("pet_id", petID),
				slog.String("date", evening.Format("2006-01-02")),
				slog.String("food_type", petCycle[lastIx]),
			)
		}
	}

	return schedule
}
