package telegram

import (
	"fmt"
	"log/slog"
	"strconv"
	"strings"
	"time"

	"github.com/qrave1/gecko-eats/internal/domain/input"
	tele "gopkg.in/telebot.v4"
)

func (b *BotServer) registerHandlers() {
	menu.Inline(
		menu.Row(btnViewGeckos, btnAddGecko, btnAddfeed),
	)

	b.bot.Handle(
		"/start", func(c tele.Context) error {
			return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", menu)
		},
	)

	// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
	b.bot.Handle(&btnViewGeckos, b.geckoListHandler)

	b.bot.Handle(
		&btnAddGecko, func(c tele.Context) error {
			return c.Edit("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", addGeckoMenu)
		},
	)

	b.bot.Handle(
		&btnAddfeed, func(c tele.Context) error {
			return c.Edit(
				"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞> <–∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –µ–¥—ã>",
				addGeckoMenu,
			)
		},
	)

	b.bot.Handle(
		tele.OnText, func(c tele.Context) error {
			if c.Message().IsReply() {
				originalMsg := c.Message().ReplyTo.Text

				if strings.Contains(
					originalMsg,
					"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞",
				) {
					return b.newGeckoHandler(c)
				} else if strings.Contains(
					originalMsg,
					"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞> <–∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –µ–¥—ã>",
				) {
					return b.newfeed(c)
				}
			} else {
				// –µ—Å–ª–∏ –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
				slog.Info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", "text", c.Text())

				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
			}

			return nil
		},
	)

	// –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏—Ç–æ–º—Ü–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	b.bot.Handle(
		tele.OnCallback, func(c tele.Context) error {
			geckoID := c.Callback().Data

			geckoID = strings.TrimPrefix(geckoID, "\f")

			gecko, err := b.geckoUsecase.GetByID(geckoID)

			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", "error", err, "geckoID", geckoID)

				return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"})
			}

			feeds, err := b.feedUsecase.GetByGeckoID(gecko.ID)

			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error", err, "geckoID", geckoID)

				return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
			}

			var answerBuilder strings.Builder

			answerBuilder.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è %s:\n", gecko.Name))

			for _, f := range feeds {
				answerBuilder.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %s\n", f.Date, f.FoodType))
			}

			return c.Edit(answerBuilder.String())
		},
	)
}

func (b *BotServer) newfeed(c tele.Context) error {
	var err error
	parts := strings.Split(c.Text(), " ")

	if len(parts) < 2 || len(parts) > 4 {
		return c.Send(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞> <–∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –µ–¥—ã>",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	createFeedingsInput := new(input.CreateFeedingsInput)

	createFeedingsInput.Name = parts[0]

	createFeedingsInput.Interval, err = strconv.Atoi(parts[1])
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è", "error", err, "interval", parts[1])

		return c.Send(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞> <–∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Ç–∏–ø–∞ –µ–¥—ã>",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	createFeedingsInput.StartDate = time.Now()

	switch len(parts) {
	case 2:
	case 3:
		createFeedingsInput.StartDate, err = time.Parse("02-01-2006", parts[2])
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞", "error", err)

			return c.Send(
				"–î–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
				&tele.SendOptions{ReplyTo: c.Message()},
			)
		}
	case 4:
		createFeedingsInput.StartDate, err = time.Parse("02-01-2006", parts[2])
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞", "error", err)

			return c.Send(
				"–î–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
				&tele.SendOptions{ReplyTo: c.Message()},
			)
		}

		createFeedingsInput.StartIx, err = strconv.Atoi(parts[3])
	default:
		return c.Send(
			"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	gecko, err := b.geckoUsecase.GetByName(createFeedingsInput.Name)
	if err != nil {
		slog.Error(
			"create feed schedule: get gecko by name",
			"error", err,
			"geckoName", createFeedingsInput.Name,
			"parts", parts,
		)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞", &tele.SendOptions{ReplyTo: c.Message()})
	}

	err = b.feedUsecase.DeleteAll(gecko.ID)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π", "error", err, "geckoID", gecko.ID)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π", &tele.SendOptions{ReplyTo: c.Message()})
	}

	createdFeeds, err := b.feedUsecase.CreateSchedule(gecko, createFeedingsInput)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è", "error", err, "interval", parts[1])

		return c.Send(
			"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	return c.Send(
		fmt.Sprintf("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ: %d –∫–æ—Ä–º–ª–µ–Ω–∏–π", createdFeeds),
		&tele.SendOptions{ReplyTo: c.Message()},
	)
}
