package telegram

import (
	"fmt"
	"strings"

	tele "gopkg.in/telebot.v4"
)

var (
	btnViewPets     = tele.Btn{Text: "üìã –ü–∏—Ç–æ–º—Ü—ã"}
	btnAddPet       = tele.Btn{Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å"}
	inlineMainMenu  = &tele.ReplyMarkup{}
	inlinePetSelect = &tele.ReplyMarkup{}
)

func (b *BotServer) registerHandlers() {
	inlineMainMenu.Inline(
		inlineMainMenu.Row(btnViewPets, btnAddPet),
	)

	b.bot.Handle("/start", func(c tele.Context) error {
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", inlineMainMenu)
	})

	// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
	b.bot.Handle(&btnViewPets, func(c tele.Context) error {
		pets, err := b.repo.Pets()

		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤")
		}

		if len(pets) == 0 {
			return c.Send("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
		}

		inlinePetSelect = &tele.ReplyMarkup{}

		var rows []tele.Row

		for _, p := range pets {
			btn := inlinePetSelect.Data(p.Name, "petView", p.ID)

			rows = append(rows, inlinePetSelect.Row(btn))
		}

		inlinePetSelect.Inline(rows...)

		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞:", inlinePetSelect)
	})

	// –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏—Ç–æ–º—Ü–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	b.bot.Handle(inlinePetSelect.Data, func(c tele.Context) error {
		petID := c.Data()

		pet, err := b.repo.PetByID(petID)

		if err != nil {
			return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"})
		}

		feedings, err := b.repo.Feedings(pet.ID, 10)

		if err != nil {
			return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
		}
		if len(feedings) == 0 {
			return c.Send("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π.")
		}

		var answerBuilder strings.Builder

		answerBuilder.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è %s:\n", pet.Name))

		for _, f := range feedings {
			answerBuilder.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %s\n", f.Date, f.FoodType))
		}

		return c.Send(answerBuilder.String())
	})
}
