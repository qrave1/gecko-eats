package telegram

import (
	"encoding/json"
	"fmt"
	"log/slog"
	"strconv"
	"strings"
	"time"

	tele "gopkg.in/telebot.v4"
)

func (b *BotServer) registerHandlers() {
	menu.Inline(
		menu.Row(btnViewGeckos, btnAddGecko, btnAddfeed),
	)

	b.bot.Handle(
		"/start", func(c tele.Context) error {
			return c.Send("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", menu)
		},
	)

	// –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤
	b.bot.Handle(&btnViewGeckos, b.geckoListHandler)

	b.bot.Handle(
		&btnAddGecko, func(c tele.Context) error {
			return c.Edit("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", addGeckoMenu)
		},
	)

	b.bot.Handle(
		&btnAddfeed, func(c tele.Context) error {
			return c.Edit("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>", addGeckoMenu)
		},
	)

	b.bot.Handle(
		tele.OnText, func(c tele.Context) error {
			if c.Message().IsReply() {
				originalMsg := c.Message().ReplyTo.Text

				if strings.Contains(
					originalMsg,
					"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞",
				) {
					return b.newGeckoHandler(c)
				} else if strings.Contains(
					originalMsg,
					"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>",
				) {
					return b.newfeed(c)
				}
			} else {
				// –µ—Å–ª–∏ –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
				slog.Info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞", "text", c.Text())

				return c.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
			}

			return nil
		},
	)

	// –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∏—Ç–æ–º—Ü–∞ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	b.bot.Handle(
		tele.OnCallback, func(c tele.Context) error {
			geckoID := c.Callback().Data

			geckoID = strings.TrimPrefix(geckoID, "\f")

			gecko, err := b.geckoUsecase.GetByID(geckoID)

			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞", "error", err, "geckoID", geckoID)

				return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞"})
			}

			feeds, err := b.feedUsecase.GetByGeckoID(gecko.ID)

			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "error", err, "geckoID", geckoID)

				return c.Respond(&tele.CallbackResponse{Text: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"})
			}

			var answerBuilder strings.Builder

			answerBuilder.WriteString(fmt.Sprintf("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è %s:\n", gecko.Name))

			for _, f := range feeds {
				answerBuilder.WriteString(fmt.Sprintf("‚Ä¢ %s ‚Äî %s\n", f.Date, f.FoodType))
			}

			return c.Edit(answerBuilder.String())
		},
	)
}

func (b *BotServer) newfeed(c tele.Context) error {
	parts := strings.Split(c.Text(), " ")

	if len(parts) != 2 {
		return c.Send(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	gecko, err := b.geckoUsecase.GetByName(parts[0])

	if err != nil {
		slog.Error(
			"create feed schedule: get gecko by name",
			"error", err,
			"geckoName", parts[0],
			"parts", parts,
		)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞", &tele.SendOptions{ReplyTo: c.Message()})
	}

	var foodCycleJSON []string

	err = json.Unmarshal([]byte(gecko.FoodCycle), &foodCycleJSON)

	if err != nil {
		slog.Error(
			"create feed schedule: unmarshal food cycle",
			"error", err,
			"food_cycle", gecko.FoodCycle,
		)

		return c.Send(
			"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ—Ä–º–ª–µ–Ω–∏—è: "+err.Error(),
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	err = b.feedUsecase.DeleteAll(gecko.ID)

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–π", "error", err, "geckoID", gecko.ID)

		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–º–ª–µ–Ω–∏–π", &tele.SendOptions{ReplyTo: c.Message()})
	}

	interval, err := strconv.Atoi(parts[1])

	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∫–æ—Ä–º–ª–µ–Ω–∏—è", "error", err, "interval", parts[1])

		return c.Send(
			"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–∏–º—è> <–∏–Ω—Ç–µ—Ä–≤–∞–ª>",
			&tele.SendOptions{ReplyTo: c.Message()},
		)
	}

	createdfeeds := b.generatefeedSchedule(time.Now(), gecko.ID, foodCycleJSON, interval)

	return c.Send(
		fmt.Sprintf("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–æ: %d –∫–æ—Ä–º–ª–µ–Ω–∏–π", createdfeeds),
		&tele.SendOptions{ReplyTo: c.Message()},
	)
}

func (b *BotServer) generatefeedSchedule(
	startDate time.Time,
	geckoID string,
	geckoCycle []string,
	interval int,
) (createdfeedsCount int) {
	endDate := startDate.AddDate(0, 1, 0) // +1 –º–µ—Å—è—Ü

	lastFoodIx := 0

	for d := startDate; d.Before(endDate); d = d.AddDate(0, 0, interval) {
		// TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã

		// TODO: –±—Ä–µ–¥ –∫–∞–∫–æ–π-—Ç–æ, –º–± –ø–æ–∑–∂–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
		//for i, foodType := range geckoCycle {
		//	parsedFoodType, err := time.Parse("2006-01-02", foodType)
		//
		//	if err != nil {
		//		slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã –∫–æ—Ä–º–ª–µ–Ω–∏—è", "error", err, "foodType", foodType)
		//
		//		continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
		//	}
		//
		//	if parsedFoodType.Year() == d.Year() &&
		//		parsedFoodType.Month() == d.Month() &&
		//		parsedFoodType.Day() == d.Day() {
		//
		//		lastIx = i
		//		break
		//	}
		//}

		// –í–µ—á–µ—Ä–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ (18:00)
		event := time.Date(d.Year(), d.Month(), d.Day(), 18, 0, 0, 0, d.Location())

		err := b.feedUsecase.Create(geckoID, event.Format("2006-01-02"), geckoCycle[lastFoodIx])

		if err != nil {
			slog.Error(
				"add feed",
				slog.Any("error", err),
				slog.String("gecko_id", geckoID),
				slog.String("date", event.Format("2006-01-02")),
				slog.String("food_type", geckoCycle[lastFoodIx]),
			)
		}

		createdfeedsCount++

		// —Å—á—ë—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –µ–¥—ã
		if lastFoodIx < len(geckoCycle)-1 {
			lastFoodIx++
		} else {
			lastFoodIx = 0
		}
	}

	return createdfeedsCount
}
